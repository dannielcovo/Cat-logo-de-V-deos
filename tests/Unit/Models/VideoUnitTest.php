<?php

namespace Tests\Unit\Models;

use App\Models\Traits\UploadFiles;
use App\Models\Video;
use App\Models\Traits\Uuid;
use Illuminate\Database\Eloquent\SoftDeletes;
use Tests\TestCase;

class VideoUnitTest extends TestCase
{
    private $video;

    public static function setUpBeforeClass(): void
    {
        //parent::setUpBeforeClass ();
    }

    //metodo que chama toda vez que roda um teste e a classe teste
    protected  function setUp (): void {
        parent::setUp (); // TODO: Change the autogenerated stub
        $this->video = new Video();
    }

    protected function tearDown(): void {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    //executa uma vez depois de todos os testes
    public static function tearDownAfterClass(): void {
        parent::tearDownAfterClass(); // TODO: Change the autogenerated stub
    }

    public function testFillableAttribute()
    {
        $fillable = [
            'title',
            'description',
            'year_launched',
            'opened',
            'rating',
            'duration',
            'video_file',
            'thumb_file',
            'trailer_file',
            'banner_file',
        ];
        $this->assertEquals($fillable, $this->video->getFillable());
    }

    //teste se a classe usa as Traits
    public function testIdUseTraits(){
        $traits = [
            SoftDeletes::class, Uuid::class, UploadFiles::class
        ];

        $videoTraits = array_keys(class_uses(Video::class));
        $this->assertEquals ($traits, $videoTraits);
//        print_r ($categoryTraits);
    }

    public function testCastsAttribute()
    {
        $casts = [
            'id'=> 'string',
            'opened'=> 'boolean',
            'year_launched'=> 'integer',
            'duration'=> 'integer',
        ];

        $this->assertEquals($casts, $this->video->getCasts());
    }

    public function testIncrementing()
    {
        $this->assertFalse($this->video->incrementing);
    }

    public function testDatesAttribute()
    {
        $dates = ['deleted_at', 'created_at', 'updated_at'];

        foreach ($dates as $date){
            $this->assertContains($date, $this->video->getDates());
        }

        $this->assertCount(count ($dates), $this->video->getDates());
    }

}
