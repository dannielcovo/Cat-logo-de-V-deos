<?php

namespace Tests\Unit\Models;

use App\Models\CastMember;
use App\Models\Traits\Uuid;
use Illuminate\Database\Eloquent\SoftDeletes;
use Tests\TestCase;

class CastMemberUnitTest extends TestCase
{
    private $cast_member;

    public static function setUpBeforeClass(): void
    {
        //parent::setUpBeforeClass ();
    }

    //metodo que chama toda vez que roda um teste e a classe teste
    protected  function setUp (): void {
        parent::setUp (); // TODO: Change the autogenerated stub
        $this->cast_member = new CastMember();
    }

    protected function tearDown(): void {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    //executa uma vez depois de todos os testes
    public static function tearDownAfterClass(): void {
        parent::tearDownAfterClass(); // TODO: Change the autogenerated stub
    }

    public function testFillableAttribute()
    {
        $fillable = ['name', 'type'];
        $this->assertEquals($fillable, $this->cast_member->getFillable());
    }

    //teste se a classe usa as Traits
    public function testIdUseTraits(){
        $traits = [
            SoftDeletes::class, Uuid::class
        ];

        $castMemberTraits = array_keys (class_uses(CastMember::class));
        $this->assertEquals ($traits, $castMemberTraits);
//        print_r ($categoryTraits);
    }

    public function testCastsAttribute()
    {
        $casts = [ 'id'=> 'string'];
        $this->assertEquals($casts, $this->cast_member->getCasts());
    }

    public function testIncrementing()
    {
        $this->assertFalse($this->cast_member->incrementing);
    }

    public function testDatesAttribute()
    {
        $dates = ['deleted_at', 'created_at', 'updated_at'];

        foreach ($dates as $date){
            $this->assertContains ($date, $this->cast_member->getDates());
        }
        //conta as datas
        $this->assertCount (count ($dates), $this->cast_member->getDates());
//        dd($category->getDates (), $dates);
    }

}
