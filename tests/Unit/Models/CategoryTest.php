<?php

namespace Tests\Unit\Models;

use App\Models\Category;
use App\Models\Traits\Uuid;
use Illuminate\Database\Eloquent\SoftDeletes;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

class CategoryTest extends TestCase
{

    private $category;

    public static function setUpBeforeClass(): void
    {
        //parent::setUpBeforeClass ();
    }

    //metodo que chama toda vez que roda um teste e a classe teste
    protected  function setUp (): void {
        parent::setUp (); // TODO: Change the autogenerated stub
        $this->category = new Category();
    }

    protected function tearDown (): void {
        parent::tearDown (); // TODO: Change the autogenerated stub
    }

    //executa uma vez depois de todos os testes
    public static function tearDownAfterClass (): void {
        parent::tearDownAfterClass (); // TODO: Change the autogenerated stub
    }

    public function testFillableAttribute()
    {
        $fillable = ['name', 'description', 'is_active'];
        $this->assertEquals($fillable, $this->category->getFillable ());
    }

    //teste se a classe usa as Traits
    public function testIdUseTraits(){
        $traits = [
            SoftDeletes::class, Uuid::class
        ];

        $categoryTraits = array_keys (class_uses (Category::class));
        $this->assertEquals ($traits, $categoryTraits);
//        print_r ($categoryTraits);
    }

    public function testCastsAttribute()
    {
        $casts = [ 'id'=> 'string', 'is_active' => 'boolean'];
        $this->assertEquals($casts, $this->category->getCasts());
    }

    public function testIncrementing()
    {
        $this->assertFalse($this->category->incrementing);
    }

    public function testDatesAttribute()
    {
        $dates = ['deleted_at', 'created_at', 'updated_at'];

        foreach ($dates as $date){
            $this->assertContains ($date, $this->category->getDates ());
        }
        //conta as datas
        $this->assertCount (count ($dates), $this->category->getDates ());
//        dd($category->getDates (), $dates);
    }

}
