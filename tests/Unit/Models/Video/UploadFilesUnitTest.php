<?php

namespace Tests\Unit\Models\Video;

use App\Models\Traits\Uuid;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Http\UploadedFile;
use Tests\Stubs\Models\UploadFilesStub;
use Tests\TestCase;

class UploadFilesUnitTest extends TestCase
{
    private $obj;

    protected  function setUp (): void {
        parent::setUp (); // TODO: Change the autogenerated stub
        $this->obj = new UploadFilesStub();
    }

    public function testUploadFile()
    {
//        \Storage::fake(); //vai criar dentro de framework/testing
        //upload file fake
        $file = UploadedFile::fake()->create('video.mp4');
        $this->obj->uploadFile($file);
        \Storage::assertExists("1/{$file->hashName()}");
    }

    public function testUploadFiles()
    {
        \Storage::fake();
        $file1 = UploadedFile::fake()->create('video.mp4');
        $file2 = UploadedFile::fake()->create('video.mp4');
        $this->obj->uploadFiles([$file1, $file2]);
        \Storage::assertExists("1/{$file1->hashName()}");
        \Storage::assertExists("1/{$file2->hashName()}");
    }

    public function testDeletefile()
    {
        \Storage::fake();

        /* testing by fileName */
        $file = UploadedFile::fake()->create('video.mp4');
        $this->obj->uploadFile($file);
        $filename = $file->hashName();
        $this->obj->deleteFile($file->hashName());
        \Storage::assertMissing("1/{$filename}");

        /* testing by instanceof UploadedFile */
        $file = UploadedFile::fake()->create('video2.mp4');
        $this->obj->uploadFile($file);
        $this->obj->deleteFile($file);
        \Storage::assertMissing("1/{$file->hashName()}");
    }

    public function testDeleteFiles()
    {
        \Storage::fake();
        $file1 = UploadedFile::fake()->create('video.mp4');
        $file2 = UploadedFile::fake()->create('video.mp4');
        $this->obj->uploadFiles([$file1, $file2]);

        $this->obj->deleteFiles([$file1->hashName(), $file2]);
        \Storage::assertMissing("1/{$file1->hashName()}");
        \Storage::assertMissing("1/{$file2->hashName()}");
    }

    //UploadFiles deleteOldfiles
    public function testDeleteOld()
    {
        \Storage::fake();
        $file1 = UploadedFile::fake()->create('video.mp4')->size(1);
        $file2 = UploadedFile::fake()->create('video.mp4')->size(1);
        $this->obj->uploadFiles([$file1, $file2]);
        $this->obj->deleteOldfiles();
        $this->assertCount(2, \Storage::allFiles());

        $this->obj->oldFiles = [$file1->hashName()];
        $this->obj->deleteOldfiles();
        \Storage::assertMissing("1/{$file1->hashName()}");
        \Storage::assertExists("1/{$file2->hashName()}");
    }

    public function testExtractFiles()
    {
        //no data
        $attributes = [];
        $file = UploadFilesStub::extractFiles($attributes);
        $this->assertCount(0, $attributes);
        $this->assertCount(0, $file);

        //send attributes
        $attributes = ['filme' => 'test'];
        $file = UploadFilesStub::extractFiles($attributes);
        $this->assertCount(1, $attributes);
        $this->assertEquals(['filme' => 'test'], $attributes);
        $this->assertCount(0, $file);

        $attributes = ['banner' => 'banner test', 'filme' => 'test'];
        $file = UploadFilesStub::extractFiles($attributes);
        $this->assertCount(2, $attributes);
        $this->assertEquals(['banner' => 'banner test', 'filme' => 'test'], $attributes);
        $this->assertCount(0, $file);

//        /* Com instancia UploadFile*/
        $file1 = UploadedFile::fake()->create('video1.mp4');
        $attributes = ['filme' => $file1, 'other' => 'banner test'];
        $files = UploadFilesStub::extractFiles($attributes);

        //verificar se esta pasando o nome do arquivo
        $this->assertEquals(['filme' => $file1->hashName(), 'other' => 'banner test'], $attributes);
        $this->assertCount(2, $attributes);
        $this->assertEquals([$file1], $files);

        $file2 = UploadedFile::fake()->create('video2.mp4');
        $attributes = ['filme' => $file1, 'banner' => $file2, 'other' => 'banner'];
        $files = UploadFilesStub::extractFiles($attributes);
        $this->assertEquals([
            'filme' => $file1->hashName(),
            'banner' => $file2->hashName(),
            'other' => 'banner'
        ], $attributes);
        $this->assertEquals([$file1, $file2], $files);
    }
}
