<?php

namespace Tests\Feature\Http\Controllers\Api;

use App\Models\Gender;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Tests\TestCase;
use Tests\Traits\TestSaves;
use Tests\Traits\TestValidations;

class GenderControllerTest extends TestCase
{
    use DatabaseMigrations, TestValidations, TestSaves;
    /**
     * A basic feature test example.
     *
     * @return void
     */
    use DatabaseMigrations;

    /**
     * @var Gender $gender
     */
    private $gender;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->gender = factory(Gender::class)->create();
    }

    public function testIndex()
    {
        $response  = $this->get(route ('genders.index'));

        $this->gender->refresh();
        $response
            ->assertStatus(200)
            ->assertJson([$this->gender->first()->toArray ()]);
    }

    public function testShow()
    {
        $response = $this->get(route ('genders.show', ['gender' => $this->gender->id]));
        $response
            ->assertStatus(200)
            ->assertJson ($this->gender->toArray());
    }

    public function testInvalidationData(){

        $data = ['name' => ''];
        $this->assertInvalidationInUpdateAction($data, 'required');
        $this->assertInvalidationInStoreAction($data, 'required');

        $data = ['name' => str_repeat ('a', 256)];
        $this->assertInvalidationInUpdateAction($data, 'max.string', ['max' => 255]);
        $this->assertInvalidationInStoreAction($data, 'max.string', ['max' => 255]);

        $data = ['is_active' => 'ativo'];
        $this->assertInvalidationInUpdateAction($data, 'boolean');
        $this->assertInvalidationInStoreAction($data, 'boolean');
    }

    public function testStore()
    {
        $data = ['name' => 'New Gender'];

        $response = $this->assertStore($data, $data + ['is_active' => true, 'deleted_at' => null]);
        $response->assertJsonStructure([
            'created_at', 'updated_at'
        ]);

        $data = [
            'name' => 'test',
            'is_active' => false,
        ];

        $this->assertStore($data, $data + ['is_active' => false]);
    }

    public function testUpdate()
    {
        $data = [
            'name' => 'Teste update',
            'is_active' => true,
        ];

        $response = $this->assertUpdate($data, $data + ['deleted_at' => null]);
        $response->assertJsonStructure([
            'created_at', 'updated_at'
        ]);
    }

    public function testDelete()
    {
        $response = $this->json('DELETE', route ('genders.destroy', ['gender' => $this->gender->id]));
        $response->assertStatus(204);
        $this->assertNull(Gender::find($this->gender->id));
        $this->assertNotNull(Gender::withTrashed()->find($this->gender->id));

    }

    protected function routeStore()
    {
        return route('genders.store');
    }

    protected function routeUpdate()
    {
        return route('genders.update', ['gender' => $this->gender->id]);
    }

    protected function model()
    {
        return Gender::class;
    }
}
