<?php

namespace Tests\Feature\Models;

use App\Models\Video;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Tests\TestCase;

class VideoTest extends TestCase
{
    use DatabaseMigrations;
    /**
     * A basic feature test example.
     *
     * @return void
     */

    /**
     * @var $sendData
    */
    private $sendData;

    /**
     * @var video
     */
    private $video;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->video = factory(Video::class)->create([
            'opened' => false
        ]);

        $this->sendData = [
            'title' => 'title',
            'description' => 'description',
            'year_launched' => 2010,
            'rating' => Video::RATING_LIST[1],
            'duration' => 90,
        ];
    }

    public function testList()
    {
        $videos = Video::all();
        $this->assertCount(1, $videos);

        //testar campos de castMember
        $videosKey = array_keys($videos->first()->getAttributes());

        $this->assertEqualsCanonicalizing(
            [
                'id',
                'title',
                'description',
                'year_launched',
                'opened',
                'rating',
                'duration',
                'deleted_at',
                'created_at',
                'updated_at'
            ],
            $videosKey
        );
    }

    public function testCreate(){
        $this->video->refresh();

        $this->assertEquals('title', $this->sendData['title']);
        $this->assertEquals('description', $this->sendData['description']);
        $this->assertEquals(2010, $this->sendData['year_launched']);
        $this->assertEquals('10', $this->sendData['rating']);
        $this->assertEquals(90, $this->sendData['duration']);
    }

    public function testUpdate(){

        $dataUpdated = [
            'title' => 'title updated',
            'description' => 'Good movie',
            'year_launched' => 2011,
            'rating' => Video::RATING_LIST[0],
            'duration' => 101,
        ];
        $this->video->update($dataUpdated);

        foreach ($dataUpdated as $key => $value){
            $this->assertEquals($value, $this->video->$key);
        }
    }

    public function testCreateUuid(){
        $this->assertIsString($this->video->id);
    }

    public function testDelete() {
        $this->video->delete();
        $this->assertSoftDeleted($this->video);
    }
}
